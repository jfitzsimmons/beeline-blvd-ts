local function show(self, proxy) 
	if self.current_proxy then
		msg.post(self.current_proxy, "unload")
		self.current_proxy = nil
	end
	msg.post(proxy, "async_load")
end

function init(self)
	--init from bootstrap (proxy.collection)
	self.current_proxy = nil 
	self.script_path = ""
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show_scene") then 
		self.script_path = message.path
		self.roomname = message.roomname
		self.npc = message.npc
		self.reason = message.reason -- testjpf makes a single table
		show(self, "#novel")
	elseif message_id == hash("unload_novel") then -- <4>
		if self.current_proxy then -- <6>
			msg.post(self.current_proxy, "disable")
			msg.post(self.current_proxy, "final")
			msg.post(self.current_proxy, "unload") -- <7>
			self.current_proxy = nil
		end
	elseif message_id == hash("proxy_loaded") then -- <9>
		self.current_proxy = sender -- <10>
		local params = {
			path = self.script_path,
			roomname = self.roomname,
			npc = self.npc,
			reason = self.reason
		}
		if sender.fragment == hash("novel") then
			msg.post("novel:/main#main", "wake_up", params)
		end
		msg.post(sender, "enable") -- <11>
	elseif message_id == hash("proxy_unloaded") then
	end
end
local world = require "main.states.worldstate"

local speed = 250

function init(self)
	msg.post("#", "acquire_input_focus")

	self.dir = vmath.vector3()
	self.current_anim = nil
	-- correction vector
	self.correction = vmath.vector3()
end

function update(self, dt)
	if vmath.length_sqr(self.dir) > 1 then
		self.dir = vmath.normalize(self.dir)
	end
	local p = go.get_position()
	go.set_position(p + self.dir * speed * dt)

	local anim = hash("idle")

	if self.dir.x > 0 then
		anim = hash("runright")
	elseif self.dir.x < 0 then
		anim = hash("runleft")
	elseif self.dir.y > 0 then
		anim = hash("runup")
	elseif self.dir.y < 0 then
		anim = hash("rundown")
	end

	if anim ~= self.current_anim then
		msg.post("#sprite", "play_animation", { id = anim })
		self.current_anim = anim
	end

	-- reset correction
	self.correction = vmath.vector3()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("wake_up") then
		ww, wh = window.get_size()
		pos = world.player.pos
		targetpos = vmath.vector3(pos.x,pos.y,0.5)
		if pos.y > wh -100 then
			targetpos.y = 150
			targetpos.x = pos.x
		elseif pos.y < 100 then
			targetpos.y = wh -150
			targetpos.x = pos.x
		end
		if pos.x > ww -100 then
			targetpos.x = 150
			targetpos.y = pos.y
		elseif pos.x < 100 then
			targetpos.x = ww -150
			targetpos.y = pos.y
		end
		
		go.set_position(vmath.vector3(targetpos.x,targetpos.y,.5))
	end
	-- Handle collision
	if message_id == hash("contact_point_response") then
		if message.distance > 0 then
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				-- Only care for projections that does not overshoot.
				local comp = (message.distance - message.distance * proj) * message.normal
				-- Apply compensation
				go.set_position(go.get_position() + comp)
				-- Accumulate correction done
				self.correction = self.correction + comp
			end
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("front") then
		self.dir.y = -1
	elseif action_id == hash("back") then
		self.dir.y = 1
	elseif action_id == hash("left") then
		self.dir.x = -1
	elseif action_id == hash("right") then
		self.dir.x = 1
	end
	if action.released then -- reset velocity if input was released
		self.dir = vmath.vector3()
	end
end
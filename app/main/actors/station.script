local world = require "main.states.worldstate"
local utils = require "main.utils.utils"

function prep_station(self, message)
	self.actions = {}
	self.actors = world.rooms.all[message.roomname].props
	self.npc = message.npc
	self.room = message.roomname
	--self.url = world.rooms.all[message.roomname].stationurl

	--if unattended, skip npc properties
	if message.npc ~= "" then
		self.npc_actions = world.npcs.all[message.npc].actions
		self.script = message.script
	end
	prep_interaction(self) -- combine actor actions
	msg.post("/npc_loader#npc_loader", "show_npc", {npc = message.npc})
end

function prep_interaction(self)
	local actions = {}

	for _,actor in ipairs(self.actors) do 
		actions[actor] = world.rooms.all[self.room].actors[actor].actions
	end
	
	if world.npcs.all[self.npc] ~= nil then
		actions[self.npc] = self.npc_actions
	end
	
	self.actions = actions
end

function on_message(self, message_id, message, sender)	
	if message_id == hash("trigger_response") then -- <2>
		if message.enter then -- <3>
			local params = {
				pos = go.get_position("adam"), --must come from .script
				actions = self.actions, --generated from actors
				script = self.script,
				collision = "enter",
				npcname = self.npc,
				--parenturl = self.url,
				room = self.room
			}	
			msg.post("adam#interact", "shownode", params )
		else
			-- for removing cloned nodes
			local params = {texts = self.actions}
				
			msg.post("adam#interact", "hidenode", params)
		end	
	elseif message_id == hash("load_station") then
		prep_station(self, message)
	end
end